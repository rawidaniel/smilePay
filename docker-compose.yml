version: '3.8'
services:

  nest-api-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nest-api-1
    restart: unless-stopped
    expose:
      - 3000
    ports:
      - '3011:3000'
    depends_on:
      - postgres
      - redis
    env_file:
      - .env.docker
    environment:
      - PORT=3000
    networks:
      - application_network
      - monitoring_network

  nest-api-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nest-api-2
    restart: unless-stopped
    expose:
      - 3000
    ports:
      - '3022:3000'
    depends_on:
      - postgres
      - redis
    env_file:
      - .env.docker
    environment:
      - PORT=3000
    networks:
      - application_network
      - monitoring_network

  postgres:
    image: postgres
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=smilepay
      - POSTGRES_PASSWORD=smilepay
      - POSTGRES_DB=smilepay
    expose:
      - 5432
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - '5433:5432'
    networks:
      - application_network

  redis:
    image: redis
    container_name: redis
    restart: unless-stopped
    command: ['redis-server', '--appendonly', 'yes']
    volumes:
      - redis:/data
    expose:
      - 6379
    ports:
      - '6378:6379'
    networks:
      - application_network

  haproxy:
    image: haproxy:1.7
    container_name: haproxy
    restart: unless-stopped
    ports:
        - 8080:8080
    expose:
        - 8080
    volumes:
        - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    depends_on:
      - nest-api-1
      - nest-api-2
    environment:
        - NEST_1_IP=nest-api-1
        - NEST_2_IP=nest-api-2
        - NEST_EXPOSED_PORT=3000
    networks:
      - application_network
      - monitoring_network
      - load_testing_network

  cadvisor:
    restart: always
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    ports:
      - "4848:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /sys/fs/cgroup/cpu,cpuacct:/sys/fs/cgroup/cpu,cpuacct:ro
    depends_on:
      - nest-api-1
      - nest-api-2
      - haproxy
    networks:
      - application_network
      - monitoring_network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    ports:
      - '9090:9090'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - cadvisor
    networks:
      - monitoring_network

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3535:3000"
    volumes:
      - grafana:/var/lib/grafana
    networks:
      - monitoring_network
    depends_on:
      - prometheus

  jenkins:
    image: jenkins/jenkins
    container_name: jenkins
    restart: unless-stopped
    ports:
      - "7070:8080"
    volumes:
      - jenkins:/var/jenkins_home
    networks:
      - application_network
    depends_on:
      - nest-api-1
      - nest-api-2

  locust:
    image: locustio/locust
    container_name: locust
    restart: unless-stopped
    ports:
      - '8089:8089'
    volumes:
      - ./locust/locustfile.py:/mnt/locust/locustfile.py
    command: -f /mnt/locust/locustfile.py --host=http://haproxy:8080/api
    depends_on:
      - nest-api-1
      - nest-api-2
      - haproxy
    networks:
      - load_testing_network

  nginx:
    image: nginx:1.20.1
    container_name: nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 80:80
      - 81:81
      - 82:82
      - 83:83
      - 84:84
      - 85:85
    depends_on:
      - haproxy
      - cadvisor
      - prometheus
      - grafana
      - jenkins
      - locust
    networks:
      - load_testing_network
      - application_network
      - monitoring_network

volumes:
  postgres:
  redis:
  grafana:
  jenkins:

networks:
  load_testing_network:
  application_network:
  monitoring_network: